import data.real.basic 
import algebra.big_operators.intervals
import measure_theory.measurable_space
import topology.basic
import measure_theory.borel_space

noncomputable theory

open set topological_space finsupp

open_locale big_operators classical

section affine_arithmetic

structure affine_form (E : Type*) [normed_group E] [normed_space ‚Ñù E] := 
(x‚ÇÄ : E) (x : ‚Ñï ‚Üí‚ÇÄ E)

structure affine_form_with_error extends affine_form ‚Ñù :=
(error : ‚Ñù)

namespace affine_form

/-- In order to evaluate noise symbols, we will use a function of type `noise`. -/
def error_interval : set ‚Ñù := Icc (-1) 1

def noise := ‚Ñï ‚Üí error_interval

variable (n : ‚Ñï)

variables {E : Type*} [normed_group E] [normed_space ‚Ñù E]

/--- Given valuation for noise symbols `Œµ` and affine form `A`, the value of `A` with `Œµ` is given
by the formula ‚ü¶A, Œµ‚üß := x‚ÇÄ + ‚àë Œµ·µ¢ * x·µ¢. -/
def eval (Œµ : noise) (A : affine_form E) : E :=
A.x‚ÇÄ + ‚àë i in A.x.support, (Œµ i).val ‚Ä¢ (A.x i)

/-- The image over all possible noises gives a set, which is how we usually think of the affine 
form `A`. It is computted as ‚ü¶A‚üß := { ‚ü¶A, Œµ‚üß | Œµ : ‚Ñï ‚Üí [-1, 1] }. -/
def set (A : affine_form E) : set E :=
set.image (Œª Œµ, eval Œµ A) ‚ä§

section operations

/-- Addition of affine forms. The lemma `eval_add_eq_add_eval` shows that it is defined 
correctly. -/
def add (A‚ÇÅ A‚ÇÇ : affine_form E) : affine_form E :=
‚ü®A‚ÇÅ.x‚ÇÄ + A‚ÇÇ.x‚ÇÄ, A‚ÇÅ.x + A‚ÇÇ.x‚ü©

instance : has_add (affine_form E) := ‚ü®add‚ü© 

@[simp] lemma add_centre (A‚ÇÅ A‚ÇÇ : affine_form E) 
: (A‚ÇÅ + A‚ÇÇ).x‚ÇÄ = A‚ÇÅ.x‚ÇÄ + A‚ÇÇ.x‚ÇÄ := rfl

@[simp] lemma add_partials (A‚ÇÅ A‚ÇÇ : affine_form E) 
: (A‚ÇÅ + A‚ÇÇ).x = A‚ÇÅ.x + A‚ÇÇ.x := rfl

private lemma eval_add_eq_sum_union (Œµ : noise) (A‚ÇÅ A‚ÇÇ : affine_form E) 
: eval Œµ (A‚ÇÅ + A‚ÇÇ) = 
  (A‚ÇÅ.x‚ÇÄ + A‚ÇÇ.x‚ÇÄ) 
  + (‚àë i in A‚ÇÅ.x.support ‚à™ A‚ÇÇ.x.support, ((Œµ i).val ‚Ä¢ (A‚ÇÅ.x i) + (Œµ i).val ‚Ä¢ (A‚ÇÇ.x i))) :=
begin  
  simp [eval, add_centre, add_partials],
  apply finset.sum_subset,
  { convert @finsupp.support_add ‚Ñï E _ (A‚ÇÅ.x) (A‚ÇÇ.x), }, 
  { intros x hx hxns,
    simp [‚Üêsmul_add, ‚Üêadd_apply, not_mem_support_iff.1 hxns], }, 
end

private lemma eval_add_eq_def (Œµ : noise) (A‚ÇÅ A‚ÇÇ : affine_form E) 
: eval Œµ (A‚ÇÅ + A‚ÇÇ) = 
  (A‚ÇÅ.x‚ÇÄ + A‚ÇÇ.x‚ÇÄ) 
  + (‚àë i in A‚ÇÅ.x.support, (Œµ i).val ‚Ä¢ (A‚ÇÅ.x i) 
  + ‚àë i in A‚ÇÇ.x.support, (Œµ i).val ‚Ä¢ (A‚ÇÇ.x i)) :=
begin 
  simp [eval_add_eq_sum_union Œµ A‚ÇÅ A‚ÇÇ, finset.sum_add_distrib], 
  apply congr_arg2 (+),
  -- Lemma here about sums over unions?
  { symmetry, apply finset.sum_subset (finset.subset_union_left _ _),
    intros x hx hxns, simp [not_mem_support_iff.1 hxns], },
  { symmetry, apply finset.sum_subset (finset.subset_union_right _ _),
    intros x hx hxns, simp [not_mem_support_iff.1 hxns], },
end

@[simp] lemma eval_add_eq_add_eval (Œµ : noise) (A‚ÇÅ A‚ÇÇ : affine_form E) 
: eval Œµ (A‚ÇÅ + A‚ÇÇ) = (eval Œµ A‚ÇÅ) + (eval Œµ A‚ÇÇ) :=
by { simp only [eval_add_eq_def], dsimp [eval], abel, }

/-- Addition of affine forms with error. -/

end operations 

-- definition add_aform'::"nat ‚áí nat ‚áí 'a::executable_euclidean_space aform ‚áí 'a aform ‚áí 'a aform"
--   where "add_aform' p n x y =
--     (let
--       z0 = trunc_bound_eucl p (fst x + fst y);
--       z = trunc_bound_pdevs p (add_pdevs (snd x) (snd y))
--       in (fst z0, pdev_upd (fst z) n (listsum' p [snd z0, snd z])))"

-- TODO 1: Maybe create an instance for executable euclidean space.
-- TODO 2: Finish dyadic rationals. Prove a bunch of instances. 
-- def add' (A‚ÇÅ A‚ÇÇ : affine_form ùîΩ n) : affine_form ùîΩ (n + 1) := ... 

def add' (A‚ÇÅ A‚ÇÇ : affine_form E) : affine_form E := sorry

-- THEOREM 5.
-- lemma add_aform'E:
--   fixes X Y::"real aform"
--   assumes e: "e ‚àà UNIV ‚Üí {- 1..1}"
--     and xn: "pdevs_apply (snd X) n = 0"
--     and yn: "pdevs_apply (snd Y) n = 0"
--   obtains err
--   where "aform_val e (add_aform X Y) = aform_val (e(n:=err)) (add_aform' p n X Y)" "err ‚àà {-1 .. 1}"

theorem add_add' (Œµ : noise n) (A‚ÇÅ A‚ÇÇ : affine_form E n) 
: ‚àÉ E : error_interval, 
    eval n Œµ (add n A‚ÇÅ A‚ÇÇ) = 
    eval (n + 1) (noise.insert_left n Œµ E) (add' n A‚ÇÅ A‚ÇÇ) := sorry

end affine_form

-- Skipping all to do with expressions.

end affine_arithmetic
